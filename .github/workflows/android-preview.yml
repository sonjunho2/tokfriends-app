name: Build Android APK (EAS)

on:
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # EAS CLI 설치
      - name: Install EAS CLI
        run: npm i -g eas-cli@latest

      # ✅ Expo/EAS 로그인 (EXPO_TOKEN을 이용해 자동 로그인)
      - name: Login to Expo (CI)
        uses: expo/expo-github-action@v8
        with:
          token: ${{ secrets.EXPO_TOKEN }}

      # 의존성 설치 (lockfile 있으면 ci, 없으면 install)
      - name: Install deps
        run: npm ci || npm install

      # eas.json이 없으면 생성 (apk 빌드 프로필)
      - name: Ensure eas.json (apk build)
        run: |
          node -e "const fs=require('fs');if(!fs.existsSync('eas.json'))fs.writeFileSync('eas.json',JSON.stringify({cli:{version: '>= 13.0.0'},build:{preview:{android:{buildType:'apk'}}}},null,2))"

      # 빌드 & APK URL 추출
      - name: Build (Android APK) & capture URL
        id: build
        run: |
          set -e
          OUT=$(eas build --platform android --profile preview --non-interactive --wait --json)
          echo "$OUT" > build.json
          APK_URL=$(node -e "const o=require('./build.json');console.log(o.artifacts?.buildUrl || o.artifacts?.applicationArchiveUrl || '')")
          echo "apk_url=$APK_URL" >> $GITHUB_OUTPUT
          echo "APK_URL: $APK_URL"

      - name: Show APK URL
        run: echo "✅ APK_URL = ${{ steps.build.outputs.apk_url }}"
