name: Build Android APK (EAS Preview, no cache)

on:
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install EAS CLI
        run: |
          npm i -g eas-cli@latest
          eas --version

      # ✅ 항상 npm install로 의존성 설치 & lockfile 생성
      - name: Install deps
        run: npm install
      - name: Print resolved Expo config (debug)
        run: npx expo config --json


      # 토큰이 있으면 자동 인증되므로 그냥 확인만
      - name: Check auth (optional)
        continue-on-error: true
        run: eas whoami

      # eas.json이 없으면 자동 생성 (apk 빌드 프로파일)
      - name: Ensure eas.json (apk build)
        run: |
          if [ ! -f eas.json ]; then
            node -e "require('fs').writeFileSync('eas.json', JSON.stringify({cli:{appVersionSource:'remote', version: '>= 13.0.0'}, build:{preview:{android:{buildType:'apk'}}}}, null, 2))"
            echo "Created eas.json"
          else
            echo "eas.json exists"
          fi

      # 캐시 의혹 제거용 --clear-cache 추가
      - name: Build (Android APK) & capture URL
        id: build
        working-directory: .
        run: |
          set -e
          # 1) 빌드 수행 + JSON 저장
          OUT=$(eas build --platform android --profile preview --non-interactive --wait --json)
          echo "$OUT" > build.json
          echo "Build JSON saved:"
          cat build.json

          # 2) 빌드 ID 추출 (객체/배열 모두 대응)
          BUILD_ID=$(node -e "const fs=require('fs');const j=JSON.parse(fs.readFileSync('build.json','utf8'));const item=Array.isArray(j)?j[0]:j;process.stdout.write(item?.id||'');")
          echo "BUILD_ID: $BUILD_ID"

          if [ -z "$BUILD_ID" ]; then
            echo '❌ BUILD_ID를 찾지 못했습니다. build.json 내용 확인 필요'
            exit 1
          fi

          # 3) 빌드 상세 재조회 (artifact URL 확보용)
          eas build:inspect $BUILD_ID --json > inspect.json || true
          echo "Inspect JSON saved:"
          cat inspect.json || true

          # 4) artifact URL 추출 (여러 모양 모두 대응)
          APK_URL=$(node -e "
            const fs=require('fs');
            function pickUrl(obj){
              if(!obj) return '';
              const a=obj.artifacts||obj;
              return a?.buildUrl || a?.applicationArchiveUrl || '';
            }
            for(const f of ['inspect.json','build.json']){
              try{
                const j=JSON.parse(fs.readFileSync(f,'utf8'));
                const arr=Array.isArray(j)?j:[j];
                const found=arr.map(pickUrl).find(Boolean);
                if(found){ console.log(found); process.exit(0); }
              }catch(e){}
            }
            console.log('');
          ")
          echo "apk_url=$APK_URL" >> $GITHUB_OUTPUT
          echo "APK_URL: $APK_URL"
