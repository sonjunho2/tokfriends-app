name: EAS Android Preview (APK)

on:
  push:
    branches: [ "main" ]      # 필요 없으면 이 블록 삭제
  workflow_dispatch:           # 수동 실행

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}  # 리포지토리 Secrets에 추가
      NODE_ENV: production                   # expo-constants 경고 억제

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 18 with npm cache
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      # EAS CLI 설치 + Expo 인증
      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: 16.17.4
          token: ${{ secrets.EXPO_TOKEN }}

      # 락파일 있으면 ci, 없으면 install
      - name: Install dependencies
        shell: bash
        run: |
          if [ -f package-lock.json ]; then
            echo "✅ Found package-lock.json -> npm ci"
            npm ci
          else
            echo "⚠️  No package-lock.json -> npm install"
            npm install
          fi

      # 선택: 프로젝트 점검(실패해도 빌드 계속)
      - name: Expo Doctor (optional)
        run: npx expo doctor || true

      # EAS Build 실행 (eas.json의 preview 프로필: APK)
      - name: EAS Build (Android Preview APK)
        id: eas_build
        shell: bash
        run: |
          set -e
          RESULT=$(eas build --platform android --profile preview --non-interactive --wait --json)
          echo "$RESULT" > build-result.json
          # 출력 키는 언더스코어만 사용!
          node -e "const fs=require('fs');const r=fs.readFileSync('build-result.json','utf8');const j=JSON.parse(r);let url='';if(Array.isArray(j)){url=j[0]?.artifactUrl||j[0]?.artifacts?.buildUrl||j[0]?.artifacts?.applicationArchiveUrl||j[0]?.buildUrl||'';}else{url=j?.artifactUrl||j?.artifacts?.buildUrl||j?.artifacts?.applicationArchiveUrl||j?.builds?.[0]?.artifactUrl||'';}process.stdout.write(`artifact_url=${url}\n`)" >> "$GITHUB_OUTPUT"

      - name: Show download URL
        run: echo "APK URL: ${{ steps.eas_build.outputs.artifact_url }}"

      # (선택) 결과 JSON 올려두기
      - name: Upload build-result.json
        uses: actions/upload-artifact@v4
        with:
          name: build-result
          path: build-result.json
