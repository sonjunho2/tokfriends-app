name: Android Preview (APK, Dev)

on:
  workflow_dispatch: {}

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

jobs:
  android-preview:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci || npm install

      - name: Install EAS CLI
        run: npm i -g eas-cli@latest

      - name: Expo login (token)
        run: eas whoami || npx eas-cli login --token ${{ secrets.EXPO_TOKEN }}

      - name: Build Android (preview) & capture URL
        id: build
        run: |
          set -e
          # 빌드 실행 및 JSON 저장
          npx eas-cli build --platform android --profile preview --non-interactive --wait --json > build.json
          echo "---- build.json saved ----"
          cat build.json
          
          # Node.js로 URL 추출
          APK_URL=$(node -e "
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('build.json', 'utf8'));
            const build = Array.isArray(data) ? data[0] : data;
            const url = build?.artifacts?.buildUrl || build?.artifacts?.applicationArchiveUrl || '';
            if (!url) {
              console.error('No APK URL found');
              process.exit(1);
            }
            console.log(url);
          ")
          
          echo "apk_url=$APK_URL" >> $GITHUB_OUTPUT
          echo "✅ APK URL: $APK_URL"

      - name: Download APK
        run: |
          set -e
          echo "Downloading APK from: ${{ steps.build.outputs.apk_url }}"
          curl -L "${{ steps.build.outputs.apk_url }}" -o ddakchin-preview.apk
          ls -lh ddakchin-preview.apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ddakchin-preview-apk
          path: ddakchin-preview.apk
          retention-days: 7
