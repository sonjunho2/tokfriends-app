name: Android Preview (APK, Dev)

on:
  workflow_dispatch: {}

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

jobs:
  android-preview:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci || npm install

      - name: Install EAS CLI
        run: npm i -g eas-cli@latest

      - name: Expo login (token)
        run: eas whoami || eas login --token ${{ secrets.EXPO_TOKEN }}

      - name: Build Android (preview)
        run: |
          set -e
          # 빌드 + JSON 결과 저장
          eas build -p android --profile preview --non-interactive --wait --json | tee build.json
          echo "---- build.json saved ----"
          cat build.json

      - name: Extract APK URL
        id: parse
        run: |
          set -e
          sudo apt-get update && sudo apt-get install -y jq
          # 루트가 배열(신규)일 수도, 객체(구버전)일 수도 있어서 둘 다 대응
          URL=$(jq -r '.[0].artifacts.buildUrl // .[0].artifacts.applicationArchiveUrl // .artifacts.buildUrl // .artifacts.applicationArchiveUrl // empty' build.json)
          if [ -z "$URL" ]; then
            echo "❌ Could not find APK URL in build.json"
            exit 1
          fi
          echo "apk_url=$URL" >> $GITHUB_OUTPUT
          echo "APK_URL: $URL"

      - name: Download APK
        run: |
          set -e
          curl -L "${{ steps.parse.outputs.apk_url }}" -o ddakchin-preview.apk
          ls -lh ddakchin-preview.apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ddakchin-preview-apk
          path: ddakchin-preview.apk
