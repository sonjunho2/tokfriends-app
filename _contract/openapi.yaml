openapi: "3.1.0"
info:
  title: "tok-friends API"
  version: "1.0.0"
  description: "Auto-generated contract based on NestJS controllers."
servers:
  -
    url: "https://api.tokfriends.app"
    description: "Production (example)"
  -
    url: "http://localhost:4000"
    description: "Local"
components:
  schemas:
    AuthUser:
      type: "object"
      properties:
        id:
          type: "string"
        email:
          type:
            - "string"
            - "null"
          format: "email"
        displayName:
          type:
            - "string"
            - "null"
        provider:
          type:
            - "string"
            - "null"
        pointsBalance:
          type: "integer"
        profile:
          type:
            - "object"
            - "null"
          additionalProperties: true
    AuthEmailSignupRequest:
      type: "object"
      required:
        - "email"
        - "password"
        - "dob"
        - "gender"
      properties:
        email:
          type: "string"
          format: "email"
        password:
          type: "string"
          minLength: 8
        displayName:
          type: "string"
        dob:
          type: "string"
        gender:
          type: "string"
    AuthEmailLoginRequest:
      type: "object"
      required:
        - "email"
        - "password"
      properties:
        email:
          type: "string"
          format: "email"
        password:
          type: "string"
    AuthEmailResponse:
      type: "object"
      required:
        - "user"
        - "token"
        - "access_token"
      properties:
        user:
          $ref: "#/components/schemas/AuthUser"
        token:
          type: "string"
        access_token:
          type: "string"
    AuthPhoneRequestOtp:
      type: "object"
      required:
        - "phone"
        - "countryCode"
      properties:
        phone:
          type: "string"
        countryCode:
          type: "string"
    AuthPhoneRequestOtpResponse:
      type: "object"
      required:
        - "requestId"
        - "expiresIn"
      properties:
        requestId:
          type: "string"
        expiresIn:
          type: "integer"
        debugCode:
          type: "string"
    AuthPhoneVerifyRequest:
      type: "object"
      required:
        - "requestId"
        - "phone"
        - "code"
      properties:
        requestId:
          type: "string"
        phone:
          type: "string"
        code:
          type: "string"
    AuthPhoneVerifyResponseSuccess:
      type: "object"
      required:
        - "token"
        - "user"
      properties:
        token:
          type: "string"
        user:
          $ref: "#/components/schemas/AuthUser"
    AuthPhoneVerifyResponsePending:
      type: "object"
      required:
        - "needsProfile"
        - "verificationId"
      properties:
        needsProfile:
          type: "boolean"
        verificationId:
          type: "string"
    AuthCompletePhoneProfileRequest:
      type: "object"
      required:
        - "phone"
        - "verificationId"
        - "nickname"
        - "birthYear"
        - "gender"
      properties:
        phone:
          type: "string"
        verificationId:
          type: "string"
        nickname:
          type: "string"
        birthYear:
          type: "integer"
        gender:
          type: "string"
        region:
          type: "string"
        headline:
          type: "string"
        bio:
          type: "string"
        avatarUri:
          type: "string"
    UserSummary:
      type: "object"
      properties:
        id:
          type: "string"
        email:
          type:
            - "string"
            - "null"
        displayName:
          type:
            - "string"
            - "null"
        status:
          type: "string"
        provider:
          type:
            - "string"
            - "null"
        pointsBalance:
          type: "integer"
        createdAt:
          type: "string"
        profile:
          type:
            - "object"
            - "null"
          additionalProperties: true
        counts:
          type:
            - "object"
            - "null"
          additionalProperties: true
    UsersMeResponse:
      type: "object"
      properties:
        ok:
          type: "boolean"
        data:
          $ref: "#/components/schemas/UserSummary"
    UsersUpdateRequest:
      type: "object"
      properties:
        displayName:
          type: "string"
        nickname:
          type: "string"
        bio:
          type: "string"
        region1:
          type: "string"
        region2:
          type: "string"
        interests:
          oneOf:
            -
              type: "array"
              items:
                type: "string"
            -
              type: "string"
        marketingOptIn:
          oneOf:
            -
              type: "boolean"
            -
              type: "string"
        headline:
          type: "string"
        avatarUri:
          type: "string"
    UsersSearchResponse:
      type: "object"
      properties:
        ok:
          type: "boolean"
        data:
          type: "array"
          items:
            type: "object"
            additionalProperties: true
    AdminUsersListResponse:
      type: "object"
      properties:
        ok:
          type: "boolean"
        page:
          type: "integer"
        limit:
          type: "integer"
        total:
          type: "integer"
        totalPages:
          type: "integer"
        data:
          type: "array"
          items:
            type: "object"
            additionalProperties: true
    AdminUserDetailResponse:
      type: "object"
      properties:
        ok:
          type: "boolean"
        data:
          type: "object"
          additionalProperties: true
    AdminUserProfileUpdate:
      type: "object"
      additionalProperties: true
    AdminUserStatusUpdate:
      type: "object"
      required:
        - "status"
      properties:
        status:
          type: "string"
        expiresAt:
          type: "string"
    AdminUserNote:
      type: "object"
      required:
        - "note"
      properties:
        note:
          type: "string"
        authorId:
          type: "string"
    AdminUserAction:
      type: "object"
      properties:
        reason:
          type: "string"
        performedBy:
          type: "string"
        metadata:
          type: "object"
          additionalProperties: true
    CreatePostRequest:
      type: "object"
      required:
        - "topicId"
        - "content"
      properties:
        topicId:
          type: "string"
        content:
          type: "string"
    Post:
      type: "object"
      properties:
        id:
          type: "string"
        userId:
          type: "string"
        topicId:
          type: "string"
        content:
          type: "string"
        createdAt:
          type: "string"
    PaginatedPosts:
      type: "object"
      properties:
        items:
          type: "array"
          items:
            $ref: "#/components/schemas/Post"
        nextCursor:
          type:
            - "string"
            - "null"
        hasMore:
          type: "boolean"
    Topic:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        createdAt:
          type: "string"
        postsCount:
          type: "integer"
    DiscoverUser:
      type: "object"
      properties:
        id:
          type: "string"
        email:
          type: "string"
        displayName:
          type:
            - "string"
            - "null"
        gender:
          type:
            - "string"
            - "null"
        dob:
          type:
            - "string"
            - "null"
        region1:
          type:
            - "string"
            - "null"
        region2:
          type:
            - "string"
            - "null"
    FriendshipRequest:
      type: "object"
      required:
        - "requesterId"
        - "addresseeId"
      properties:
        requesterId:
          type: "string"
        addresseeId:
          type: "string"
    Friendship:
      type: "object"
      properties:
        id:
          type: "string"
        requesterId:
          type: "string"
        addresseeId:
          type: "string"
        status:
          type: "string"
        createdAt:
          type: "string"
        updatedAt:
          type: "string"
      additionalProperties: true
    ChatMessageRequest:
      type: "object"
      required:
        - "chatId"
        - "senderId"
        - "content"
      properties:
        chatId:
          type: "string"
        senderId:
          type: "string"
        content:
          type: "string"
    ChatRoomRequest:
      type: "object"
      required:
        - "userAId"
        - "userBId"
      properties:
        userAId:
          type: "string"
        userBId:
          type: "string"
        title:
          type: "string"
        category:
          type: "string"
    ChatDirectRequest:
      type: "object"
      required:
        - "targetUserId"
      properties:
        targetUserId:
          type: "string"
    PointProduct:
      type: "object"
      properties:
        id:
          type: "string"
        productId:
          type: "string"
        label:
          type: "string"
        priceText:
          type: "string"
        points:
          type: "integer"
        recommended:
          type: "boolean"
        currency:
          type: "string"
    ConfirmPurchaseRequest:
      type: "object"
      required:
        - "productId"
        - "transactionId"
        - "receipt"
        - "platform"
      properties:
        productId:
          type: "string"
        transactionId:
          type: "string"
        receipt:
          type: "string"
        platform:
          type: "string"
    ConfirmPurchaseResponse:
      type: "object"
      properties:
        success:
          type: "boolean"
        balance:
          type: "integer"
    GiftItem:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
        imageUrl:
          type: "string"
        priceCents:
          type: "integer"
        currency:
          type: "string"
    LegalDocument:
      type: "object"
      properties:
        slug:
          type: "string"
        title:
          type: "string"
        content:
          type: "string"
    Announcement:
      type: "object"
      properties:
        id:
          type: "string"
        title:
          type: "string"
        body:
          type: "string"
        isActive:
          type: "boolean"
        createdAt:
          type: "string"
        startsAt:
          type:
            - "string"
            - "null"
        endsAt:
          type:
            - "string"
            - "null"
    AnnouncementCreate:
      type: "object"
      required:
        - "title"
        - "body"
      properties:
        title:
          type: "string"
        body:
          type: "string"
        isActive:
          type: "boolean"
        startsAt:
          type: "string"
        endsAt:
          type:
            - "string"
            - "null"
    AnnouncementUpdate:
      type: "object"
      properties:
        title:
          type: "string"
        body:
          type: "string"
        isActive:
          type: "boolean"
        startsAt:
          type: "string"
        endsAt:
          type:
            - "string"
            - "null"
    ReportItem:
      type: "object"
      properties:
        id:
          type: "string"
        reason:
          type: "string"
        status:
          type: "string"
        createdAt:
          type: "string"
      additionalProperties: true
    MetricsSummary:
      type: "object"
      properties:
        users:
          type: "integer"
        posts:
          type: "integer"
        chats:
          type: "integer"
        reports:
          type: "integer"
        activeAnnouncements:
          type: "integer"
        bannedWords:
          type: "integer"
        activeSubscriptions:
          type: "integer"
    MetricsDashboard:
      type: "object"
      additionalProperties: true
    CommunityReport:
      type: "object"
      required:
        - "reason"
      properties:
        targetUserId:
          type: "string"
        postId:
          type: "string"
        reason:
          type: "string"
    CommunityBlock:
      type: "object"
      required:
        - "blockedUserId"
      properties:
        blockedUserId:
          type: "string"
    TranslateRequest:
      type: "object"
      required:
        - "text"
        - "source"
        - "target"
      properties:
        text:
          type: "string"
        source:
          type: "string"
        target:
          type: "string"
    TranslateResponse:
      type: "object"
      properties:
        text:
          type: "string"
        provider:
          type: "string"
        mode:
          type: "string"
        error:
          type: "string"
    HealthResponse:
      type: "object"
      properties:
        ok:
          type: "boolean"
        timestamp:
          type: "string"
        components:
          type: "array"
          items:
            type: "object"
            additionalProperties: true
    AdminSetRoleRequest:
      type: "object"
      required:
        - "role"
      properties:
        role:
          type: "string"
    RefundRequest:
      type: "object"
      required:
        - "userId"
        - "platform"
        - "productId"
        - "receiptId"
      properties:
        userId:
          type: "string"
        platform:
          type: "string"
        productId:
          type: "string"
        receiptId:
          type: "string"
        reason:
          type: "string"
    Refund:
      type: "object"
      additionalProperties: true
  securitySchemes:
    bearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
paths:
  /:
    get:
      summary: "Redirect to docs"
      tags:
        - "root"
      responses:
        302:
          description: "Redirect to /docs"
  /health:
    get:
      summary: "Health check"
      tags:
        - "health"
      responses:
        200:
          description: "Service health"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /auth/signup/email:
    post:
      summary: "Email signup"
      tags:
        - "auth"
      responses:
        201:
          description: "User created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthEmailResponse"
        400:
          description: "Invalid input"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthEmailSignupRequest"
      description: " Aliases: /auth/signup, /auth/register, /auth/users/signup, /auth/users/register."
  /auth/login/email:
    post:
      summary: "Email login"
      tags:
        - "auth"
      responses:
        200:
          description: "Login success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthEmailResponse"
        401:
          description: "Invalid credentials"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthEmailLoginRequest"
      description: " Aliases: /auth/login."
  /auth/apple:
    post:
      summary: "Apple login"
      tags:
        - "auth"
      responses:
        400:
          description: "Not implemented"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                token:
                  type: "string"
                idToken:
                  type: "string"
                authorizationCode:
                  type: "string"
              required:
                - "token"
  /auth/phone/request-otp:
    post:
      summary: "Request phone OTP"
      tags:
        - "auth"
      responses:
        200:
          description: "OTP issued"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthPhoneRequestOtpResponse"
        400:
          description: "Invalid phone"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthPhoneRequestOtp"
  /auth/phone/verify:
    post:
      summary: "Verify phone OTP"
      tags:
        - "auth"
      responses:
        200:
          description: "Verification result"
          content:
            application/json:
              schema:
                oneOf:
                  -
                    $ref: "#/components/schemas/AuthPhoneVerifyResponseSuccess"
                  -
                    $ref: "#/components/schemas/AuthPhoneVerifyResponsePending"
        400:
          description: "Invalid request"
        401:
          description: "Incorrect code"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthPhoneVerifyRequest"
  /auth/phone/complete-profile:
    post:
      summary: "Complete phone profile"
      tags:
        - "auth"
      responses:
        200:
          description: "Account issued"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthPhoneVerifyResponseSuccess"
        400:
          description: "Invalid verification"
        409:
          description: "Already registered"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthCompletePhoneProfileRequest"
  /users/me:
    get:
      summary: "Get current user"
      tags:
        - "users"
      responses:
        200:
          description: "Current profile"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersMeResponse"
        404:
          description: "Not found"
      security:
        -
          bearerAuth:

  /users/search:
    get:
      summary: "Search users"
      tags:
        - "users"
      responses:
        200:
          description: "Matches"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersSearchResponse"
      security:
        -
          bearerAuth:

  /users/{id}:
    patch:
      summary: "Update profile"
      tags:
        - "users"
      responses:
        200:
          description: "Updated profile"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersMeResponse"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersUpdateRequest"
    get:
      summary: "Get user"
      tags:
        - "users"
      responses:
        200:
          description: "User detail"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersMeResponse"
        404:
          description: "Not found"
      security:
        -
          bearerAuth:

  /admin/users:
    get:
      summary: "Admin list users"
      tags:
        - "admin/users"
      responses:
        200:
          description: "Paginated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUsersListResponse"
      security:
        -
          bearerAuth:

  /admin/users/{id}:
    get:
      summary: "Admin user detail"
      tags:
        - "admin/users"
      responses:
        200:
          description: "Detail"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUserDetailResponse"
        404:
          description: "Not found"
      security:
        -
          bearerAuth:

    patch:
      summary: "Admin update user"
      tags:
        - "admin/users"
      responses:
        200:
          description: "Updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUserDetailResponse"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUserProfileUpdate"
  /admin/users/{id}/status:
    patch:
      summary: "Admin update status"
      tags:
        - "admin/users"
      responses:
        200:
          description: "Status updated"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUserStatusUpdate"
  /admin/users/{id}/notes:
    post:
      summary: "Admin add note"
      tags:
        - "admin/users"
      responses:
        200:
          description: "Note added"
        400:
          description: "Missing note"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUserNote"
  /admin/users/{id}/actions/resend-verification:
    post:
      summary: "Log resend verification"
      tags:
        - "admin/users"
      responses:
        200:
          description: "Logged"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUserAction"
  /admin/users/{id}/actions/password-reset:
    post:
      summary: "Log password reset"
      tags:
        - "admin/users"
      responses:
        200:
          description: "Logged"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUserAction"
  /admin/users/{id}/actions/escalate:
    post:
      summary: "Log escalate"
      tags:
        - "admin/users"
      responses:
        200:
          description: "Logged"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUserAction"
  /posts:
    post:
      summary: "Create post"
      tags:
        - "posts"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostRequest"
    get:
      summary: "List posts"
      tags:
        - "posts"
      responses:
        200:
          description: "List"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedPosts"
      security:
        -
          bearerAuth:

  /topics/{id}/posts:
    get:
      summary: "Posts by topic"
      tags:
        - "posts"
      responses:
        200:
          description: "List"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedPosts"
      security:
        -
          bearerAuth:

  /topics:
    get:
      summary: "List topics"
      tags:
        - "topics"
      responses:
        200:
          description: "Topics"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Topic"
      security:
        -
          bearerAuth:

  /discover:
    get:
      summary: "Discover users"
      tags:
        - "discover"
      responses:
        200:
          description: "Matches"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/DiscoverUser"
      security:
        -
          bearerAuth:

  /friendships:
    post:
      summary: "Send friend request"
      tags:
        - "friendships"
      responses:
        200:
          description: "Created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    $ref: "#/components/schemas/Friendship"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FriendshipRequest"
    get:
      summary: "List friend requests"
      tags:
        - "friendships"
      responses:
        200:
          description: "Requests"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Friendship"
      security:
        -
          bearerAuth:

  /friendships/{id}/accept:
    post:
      summary: "Accept friend"
      tags:
        - "friendships"
      responses:
        200:
          description: "Accepted"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    $ref: "#/components/schemas/Friendship"
      security:
        -
          bearerAuth:

  /friendships/{id}/decline:
    post:
      summary: "Decline friend"
      tags:
        - "friendships"
      responses:
        200:
          description: "Declined"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    $ref: "#/components/schemas/Friendship"
      security:
        -
          bearerAuth:

  /friendships/{id}/cancel:
    post:
      summary: "Cancel friend"
      tags:
        - "friendships"
      responses:
        200:
          description: "Cancelled"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    $ref: "#/components/schemas/Friendship"
      security:
        -
          bearerAuth:

  /chats:
    get:
      summary: "List chats"
      tags:
        - "chats"
      responses:
        200:
          description: "Chats"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  additionalProperties: true
      security:
        -
          bearerAuth:

  /chats/message:
    post:
      summary: "Send message"
      tags:
        - "chats"
      responses:
        200:
          description: "Message"
          content:
            application/json:
              schema:
                type: "object"
                additionalProperties: true
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatMessageRequest"
  /chats/rooms:
    post:
      summary: "Create chat room"
      tags:
        - "chats"
      responses:
        200:
          description: "Room"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  id:
                    type: "string"
                  userAId:
                    type: "string"
                  userBId:
                    type: "string"
                  title:
                    type: "string"
                  category:
                    type: "string"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatRoomRequest"
      description: " Aliases: /chats/chat/rooms, /chats/chats/rooms, /chats/conversations."
  /chats/direct:
    post:
      summary: "Ensure direct chat"
      tags:
        - "chats"
      responses:
        200:
          description: "Direct room"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "string"
                  title:
                    type: "string"
                  participants:
                    type: "array"
                    items:
                      type: "object"
                      additionalProperties: true
        400:
          description: "Invalid target"
        404:
          description: "Target not found"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatDirectRequest"
  /store/point-products:
    get:
      summary: "List point products"
      tags:
        - "store"
      responses:
        200:
          description: "Products"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  items:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/PointProduct"
  /store/purchases/confirm:
    post:
      summary: "Confirm purchase"
      tags:
        - "store"
      responses:
        200:
          description: "Balance"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfirmPurchaseResponse"
        400:
          description: "Invalid"
        409:
          description: "Duplicate"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmPurchaseRequest"
  /gifts:
    get:
      summary: "List gifts"
      tags:
        - "gifts"
      responses:
        200:
          description: "Gifts"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/GiftItem"
                  items:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/GiftItem"
  /legal-documents/{slug}:
    get:
      summary: "Get legal document"
      tags:
        - "legal"
      responses:
        200:
          description: "Document"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegalDocument"
        404:
          description: "Not found"
  /admin/announcements:
    get:
      summary: "Admin list announcements"
      tags:
        - "admin/announcements"
      responses:
        200:
          description: "Announcements"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Announcement"
      security:
        -
          bearerAuth:

    post:
      summary: "Create announcement"
      tags:
        - "admin/announcements"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    $ref: "#/components/schemas/Announcement"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnouncementCreate"
  /admin/announcements/{id}:
    patch:
      summary: "Update announcement"
      tags:
        - "admin/announcements"
      responses:
        200:
          description: "Updated"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    $ref: "#/components/schemas/Announcement"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnouncementUpdate"
    delete:
      summary: "Delete announcement"
      tags:
        - "admin/announcements"
      responses:
        200:
          description: "Deleted"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
      security:
        -
          bearerAuth:

  /announcements/active:
    get:
      summary: "Active announcements"
      tags:
        - "announcements"
      responses:
        200:
          description: "Active"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Announcement"
      security:
        -
          bearerAuth:

  /announcements:
    get:
      summary: "List announcements"
      tags:
        - "announcements"
      responses:
        200:
          description: "Announcements"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Announcement"
      security:
        -
          bearerAuth:

  /admin/reports:
    get:
      summary: "Admin list reports"
      tags:
        - "admin/reports"
      responses:
        200:
          description: "Reports"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/ReportItem"
      security:
        -
          bearerAuth:

  /admin/reports/recent:
    get:
      summary: "Recent reports"
      tags:
        - "admin/reports"
      responses:
        200:
          description: "Recent"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/ReportItem"
      security:
        -
          bearerAuth:

  /metrics:
    get:
      summary: "Metrics summary"
      tags:
        - "metrics"
      responses:
        200:
          description: "Summary"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    $ref: "#/components/schemas/MetricsSummary"
      security:
        -
          bearerAuth:

  /metrics/dashboard:
    get:
      summary: "Metrics dashboard"
      tags:
        - "metrics"
      responses:
        200:
          description: "Dashboard"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  data:
                    $ref: "#/components/schemas/MetricsDashboard"
      security:
        -
          bearerAuth:

  /community/report:
    post:
      summary: "Report content"
      tags:
        - "community"
      responses:
        200:
          description: "Reported"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  id:
                    type: "string"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommunityReport"
  /community/block:
    post:
      summary: "Block user"
      tags:
        - "community"
      responses:
        200:
          description: "Blocked"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  ok:
                    type: "boolean"
                  id:
                    type: "string"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommunityBlock"
  /translate:
    post:
      summary: "Translate text"
      tags:
        - "translate"
      responses:
        200:
          description: "Translated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranslateResponse"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranslateRequest"
  /icebreakers:
    get:
      summary: "Get icebreakers"
      tags:
        - "icebreakers"
      responses:
        200:
          description: "Prompts"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
      security:
        -
          bearerAuth:

  /admin/users/{id}/role:
    patch:
      summary: "Set user role"
      tags:
        - "admin"
      responses:
        200:
          description: "Role updated"
          content:
            application/json:
              schema:
                type: "object"
                additionalProperties: true
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminSetRoleRequest"
  /admin/refunds:
    get:
      summary: "List refunds"
      tags:
        - "admin"
      responses:
        200:
          description: "Refunds"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Refund"
      security:
        -
          bearerAuth:

    post:
      summary: "Create refund"
      tags:
        - "admin"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Refund"
      security:
        -
          bearerAuth:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefundRequest"
  /admin/refunds/{id}/approve:
    patch:
      summary: "Approve refund"
      tags:
        - "admin"
      responses:
        200:
          description: "Approved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Refund"
      security:
        -
          bearerAuth:

  /admin/refunds/{id}/deny:
    patch:
      summary: "Deny refund"
      tags:
        - "admin"
      responses:
        200:
          description: "Denied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Refund"
      security:
        -
          bearerAuth:
