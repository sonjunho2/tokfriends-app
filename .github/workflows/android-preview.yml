name: Android Preview (APK, Dev)

on:
  workflow_dispatch: {}

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

jobs:
  android-preview:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Print env (debug)
        run: |
          node -v
          npm -v
          echo "EXPO_TOKEN set? ${{ env.EXPO_TOKEN != '' }}"

      # ⬇️ 여기 변경: npm ci 제거, install만 사용
      - name: Install deps
        run: |
          npm install --no-audit --fund=false

      - name: Install EAS CLI
        run: npm i -g eas-cli@latest

      - name: Expo login (token)
        run: eas whoami || eas login --token ${{ secrets.EXPO_TOKEN }}

      - name: Show resolved config (non-blocking)
        run: |
          npx expo config --json || true
          npx expo-doctor || true

      # ✅ 빌드 + JSON 캡처
      - name: Build Android (preview; clear cache) -> capture JSON
        id: build
        shell: bash
        run: |
          set -e
          OUT="$(eas build -p android --profile preview --non-interactive --wait --clear-cache --json)"
          echo "$OUT" > build.json
          echo "---- build.json ----"
          cat build.json || true

          # ✅ 최상위 배열/객체/빌드리스트 모든 케이스 안전 처리
          APK_URL=$(node -e "const fs=require('fs');const raw=fs.readFileSync('build.json','utf8');const o=JSON.parse(raw);
            const first = Array.isArray(o) ? o[0] : (Array.isArray(o?.builds) ? o.builds[0] : o);
            const url = first?.artifacts?.applicationArchiveUrl || first?.artifacts?.buildUrl || first?.artifacts?.apkUrl || '';
            if(!url){process.exit(1)}; process.stdout.write(url);
          ")

          echo "apk_url=$APK_URL" >> $GITHUB_OUTPUT
          echo "APK_URL: $APK_URL"

      - name: Download APK (via URL)
        run: |
          curl -fL "${{ steps.build.outputs.apk_url }}" -o ddakchin-preview.apk
          ls -lh ddakchin-preview.apk

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ddakchin-preview-apk
          path: ddakchin-preview.apk
          if-no-files-found: error
